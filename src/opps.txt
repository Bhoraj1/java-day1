// Types of Constructors in java
//1. Non-parameterized constructors
//2.parameterized constructors
//3. Copy constructors


class Pen {
    String color;
    String type;


    public  void printColor(){
        System.out.println("The Color of the Pen is " + this.color);
    }
}


class Student {
    String name;
    int age;

    public  void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }


    // non-parameterized  constructor
    Student(){
        System.out.println("constructor called");
    }

    // Parameterized constructor
    Student(String name, int age){
       this.name = name;
       this.age = age;
    }

    // Copy constructor
    Student(Student pen1){
        this.name = pen1.name;
        this.age = pen1.age;
    }
}



public class Main {
    public  static void main(String[] args){
        // ClassName objectName = new ClassName();
        // non-parameterized  constructor
        Pen pen1 = new Pen();
        pen1.color="RED";
        pen1.type = "GEL PEN";


        // Parameterized constructors
        Student s1 = new Student("Aman",24);


        // Copy Constructors
        Student s2 = new Student(s1);
        s2.printInfo();
    }
}


----1. Polymorphism --------
(many + forms): single work done by many ways is called polymorphism. or we can say : same function name can be used
for and different purpose.
1.1 types of polymorphism
i. Function OverRiding(run time)
ii. Function Overloading(compile time)

class Student {
    String name;
    int age;

    public void printInfo(String name) {
        System.out.println(name);
    }

    public void printInfo(int age) {
        System.out.println(age);
    }

    public  void printInfo(String name,int age){
        System.out.println(name + " " + age);
    }
}

public class Main {
    public  static void main(String[] args){
        Student s1 = new Student();
                s1.name = "ram";
                s1.age = 20;
                s1.printInfo(s1.name,s1.age);

    }
}


--- Inheritance ------- ( passing and one class properties to another class is called inheritance)
class Shape {
    String color;
    String type;
    }

class Triangle extends Shape {
  public  void printInfo(String color){
      System.out.println(this.color);
  }
}

public class Main {
    public  static void main(String[] args){
     Triangle t1 = new Triangle();
             t1.color = "Red";
             t1.printInfo(t1.color);

    }
}

-- Types of Inheritance ----
1.Single level Inheritance
class Shape {
    String color;
    String type;
    }

class Triangle extends Shape {
  public  void printInfo(String color){
      System.out.println(this.color);
  }
}

public class Main {
    public  static void main(String[] args){
     Triangle t1 = new Triangle();
             t1.color = "Red";
             t1.printInfo(t1.color);

    }
}

ii.Multi level inheritance




